import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { RouterModule } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Location } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { User } from '../../models/user';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, RouterModule, ReactiveFormsModule],
  template: `
    <div class="login-container">
      <ng-container *ngIf="!currentUser; else userAvatar">
        <button class="login-btn" (click)="login()">
          <span class="btn-icon">üë§</span>
          –í–æ–π—Ç–∏
        </button>
      </ng-container>

      <ng-template #userAvatar>
        <div class="user-profile" (click)="goToProfile()">
          <img
            [src]="currentUser?.avatar || 'assets/default-avatar.png'"
            [alt]="currentUser?.nickname || '–ü—Ä–æ—Ñ–∏–ª—å'"
            class="avatar-img"
          >
          <span class="user-name">{{ currentUser?.nickname || '–ü—Ä–æ—Ñ–∏–ª—å' }}</span>
        </div>
      </ng-template>
    </div>

    <section class="hero">
      <div class="hero-content">
        <h1 class="animate-title">–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –ú–æ—Å–∫–≤–µ</h1>
        <p class="animate-text">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</p>
        <button class="generate-route-btn animate-btn" (click)="startPlanning()">
          <span class="btn-icon">üó∫Ô∏è</span>
          –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
        </button>
      </div>
    </section>

    <section class="themed-routes">
      <h2>–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã</h2>
      <div class="routes-grid">
        <div class="route-card">
          <h3>üé® –ê—Ä—Ç-–º–∞—Ä—à—Ä—É—Ç—ã</h3>
          <p>–ì–∞–ª–µ—Ä–µ–∏, —Å—Ç—Ä–∏—Ç-–∞—Ä—Ç, –º—É–∑–µ–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞</p>
        </div>
        <div class="route-card">
          <h3>üèõÔ∏è –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã</h3>
          <p>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏, –º—É–∑–µ–∏, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞</p>
        </div>
        <div class="route-card">
          <h3>üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç—É—Ä—ã</h3>
          <p>–†—ã–Ω–∫–∏, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –∫–∞—Ñ–µ —Å –º–µ—Å—Ç–Ω–æ–π –∫—É—Ö–Ω–µ–π</p>
        </div>
      </div>
    </section>

    <section class="seasonal-routes">
      <h2>–ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ —Å–µ–∑–æ–Ω–∞–º</h2>
      <div class="season-cards">
        <div class="season-card winter">
          <h3>‚ùÑÔ∏è –ó–∏–º–Ω—è—è –ú–æ—Å–∫–≤–∞</h3>
          <p>–ö–∞—Ç–∫–∏, –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ —è—Ä–º–∞—Ä–∫–∏, —Ç–µ–ø–ª—ã–µ –º—É–∑–µ–∏</p>
        </div>
        <div class="season-card spring">
          <h3>üå∏ –í–µ—Å–µ–Ω–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏</h3>
          <p>–¶–≤–µ—Ç—É—â–∏–µ –ø–∞—Ä–∫–∏, —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏, –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–µ—Ä–∞–Ω–¥—ã</p>
        </div>
        <div class="season-card summer">
          <h3>‚òÄÔ∏è –õ–µ—Ç–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è</h3>
          <p>–ü–∞—Ä–∫–∏, —Ñ–æ–Ω—Ç–∞–Ω—ã, —Ä–µ—á–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏</p>
        </div>
        <div class="season-card autumn">
          <h3>üçÅ –û—Å–µ–Ω–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã</h3>
          <p>–£—é—Ç–Ω—ã–µ –∫–∞—Ñ–µ, –∑–æ–ª–æ—Ç—ã–µ –ø–∞—Ä–∫–∏, –º—É–∑–µ–∏</p>
        </div>
      </div>
    </section>
  `,
  styleUrls: ['./home.component.scss'],
  styles: [`
    .login-container {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
      z-index: 10;
    }

    .login-btn {
      padding: 0.6rem 1.2rem;
      border: none;
      border-radius: 2rem;
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(10px);
      color: white;
      font-weight: 500;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.3s ease;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);

      .btn-icon {
        font-size: 1.2rem;
      }

      &:hover {
        background: var(--primary);
        transform: translateY(-2px);
      }
    }

    .user-profile {
      display: flex;
      align-items: center;
      gap: 0.8rem;
      padding: 0.4rem 1rem 0.4rem 0.4rem;
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(10px);
      border-radius: 2rem;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);

      .avatar-img {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid rgba(255, 255, 255, 0.5);
      }

      .user-name {
        font-size: 0.9rem;
        color: white;
        font-weight: 500;
      }

      &:hover {
        background: var(--primary);
        transform: translateY(-2px);
      }
    }
  `]
})
export class HomeComponent implements OnInit {
  showBackButton = false;
  isAuthenticated = false;
  userAvatar = 'assets/default-avatar.png';
  showAuthModal = false;
  isLoginMode = true;
  authForm: FormGroup;
  currentUser: User | null = null;

  constructor(
    private router: Router,
    private fb: FormBuilder,
    private location: Location,
    private authService: AuthService
  ) {
    this.authForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    });
  }

  ngOnInit(): void {
    this.authService.currentUser$.subscribe(user => {
      this.currentUser = user;
    });
  }

  login(): void {
    console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞');
    this.router.navigate(['/login']);
  }

  startPlanning(): void {
    console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
    this.router.navigate(['/route'])
      .then(() => console.log('–£—Å–ø–µ—à–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è'))
      .catch(err => console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', err));
  }

  goBack() {
    this.location.back();
  }

  openProfileMenu() {
    if (!this.isAuthenticated) {
      this.showAuthModal = true;
    } else {
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å
    }
  }

  closeAuthModal() {
    this.showAuthModal = false;
  }

  onSubmit() {
    if (this.authForm.valid) {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      console.log(this.authForm.value);
    }
  }

  goToProfile() {
    this.router.navigate(['/profile']);
  }
}
